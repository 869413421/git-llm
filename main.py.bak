import os
import subprocess
import tkinter as tk
from tkinter import messagebox

import openai
from unidiff import PatchSet

openai.api_key = "your-api-key"  # 替换为你的 OpenAI API 密钥


def get_git_diff(repo_path):
    """
    获取 Git 暂存和未暂存的差异
    """
    os.chdir(repo_path)
    try:
        unstaged_diff = subprocess.run(["git", "diff"], capture_output=True, text=True, encoding="utf-8").stdout
        staged_diff = subprocess.run(["git", "diff", "--cached"], capture_output=True, text=True, encoding="utf-8").stdout
        return unstaged_diff, staged_diff
    except UnicodeDecodeError as e:
        print(f"Unicode 解码错误: {e}")
        return None, None


def parse_git_diff(diff_text):
    """
    解析 Git 差异
    """
    patch = PatchSet(diff_text)
    changes = []
    for file in patch:
        for hunk in file:
            for line in hunk:
                if line.is_added:
                    changes.append(f"新增: {line.value.strip()}")
                elif line.is_removed:
                    changes.append(f"删除: {line.value.strip()}")
    return "\n".join(changes)


def generate_commit_message(changes_summary):
    """
    调用 GPT 生成提交备注
    """

    prompt = f"""
    如果你提供了代码内容，模型可以根据代码改动的具体情况分析并生成提交备注。下面是一个适用于这种情况的完整 Prompt 模板：

---

**现在，我将提供一次 Git 提交中的修改代码内容，你需要根据代码变更生成简洁、准确的提交备注。  

**要求：**  
1. 根据代码修改内容判断提交的目的（例如 `feat`, `fix`, `perf`, `docs`, `chore` 等类别）。  
2. 提交备注要清晰地描述代码变更的核心内容、作用或解决的问题。  
3. 如果提交内容包含多项功能或修复，请分别为每项内容生成备注。  
4. 格式严格遵循 [Conventional Commits](https://www.conventionalcommits.org/) 规范。  

**代码修改内容：**  
```
{changes_summary}
```

**输出格式：**  
```
<类别>: <简洁描述代码修改内容>
<类别>: <简洁描述代码修改内容>（如果有多条提交）
```
    """
    from openai import OpenAI
    client = OpenAI(api_key="sk-edE5748JnXpVrGdBn6rQH4Eidd0l5vps2oFEHBF7r3tKVCyq", base_url="https://www.DMXapi.com/v1/")

    completion = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "你是一个专业的 Git 提交备注生成助手。"},
            {
                "role": "user",
                "content": prompt
            }
        ]
    )

    return completion.choices[0].message.content


def display_commit_message(commit_message):
    """
    使用 Tkinter 显示并允许编辑提交备注
    """
    root = tk.Tk()
    root.title("生成的提交备注")
    root.geometry("500x300")
    text = tk.Text(root, height=15, width=60)
    text.insert("1.0", commit_message)
    text.pack()

    def submit():
        final_message = text.get("1.0", tk.END).strip()
        messagebox.showinfo("提交备注", f"最终提交备注：\n{final_message}")
        root.destroy()
        return final_message

    button = tk.Button(root, text="确认提交", command=submit)
    button.pack()
    root.mainloop()


def main(repo_path):
    unstaged, staged = get_git_diff(repo_path)
    if unstaged is None or staged is None:
        print("获取 Git 差异时出现错误，可能是路径无效或编码问题。")
        return
    changes_summary = parse_git_diff(unstaged + staged)
    if not changes_summary:
        print("没有检测到代码变更。")
        return

    commit_message = generate_commit_message(changes_summary)
    print(commit_message)
    display_commit_message(commit_message)


if __name__ == "__main__":
    import sys

    if len(sys.argv) < 2:
        print("请提供 Git 仓库路径作为参数。")
    else:
        main(sys.argv[1])
